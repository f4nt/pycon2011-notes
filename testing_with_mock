Testing with Mock by Michael Foord
===============

Description:
-----------------

mock is a Python testing library. It has the goal of making mocking in tests brain dead simple! mock provides the Mock class and the patch decorator for safely patching out the objects you are mocking in your tests. This talk will cover standard mocking patterns. We'll also look at some of the newer features in the latest release, including support for mocking magic methods.

Triple AAA Pattern (Arrange, Act, Assert) rather than record and play.

If it isn't tested, it doesn't work!


Example::

    from othermodule import BigClass

    class SomeClass(object):
        def method(self, arg):
            self.thing = BigClass(arg)

How to test that::

    from mock import patch, sentinel
    from module import SomeClass

    with patch('module.BigClass') as MockClass:
        obj = SomeClass()
        arg = sentinel.arg
        obj.method(arg)

        instance = MockClass.return_value
        assert obj.thing is instance
        MockClass.assert_called_once_with(arg)

Only use mock where it needs to be done. If it makes your testing shorter and simpler, then go for it. If it's over complicating your code, then avoid it. Over mocking ties your tests to your implementation details of your code, instead of behavior.

voidspace.org.uk/python/mock
@voidspace
voidspace.org.uk/blog